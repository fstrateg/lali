<?php
namespace backend\models;

use Yii;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * User model
 *
 * @property integer $id
 * @property string $username
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property string $role
 * @property string $auth_key
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class Users extends ActiveRecord
{
    public $npassword;
    public $cpassword;

    public static function tableName()
    {
        return '{{%user}}';
    }

    public function rules()
    {
        return [
            [['npassword','cpassword'],'safe'],
            [['username','email','role'],'required'],
            ['email','email'],
            [['username','email'],'checkDouble'],
            ['npassword','checkPass']
        ];
    }

    public function AfterValidate()
    {
        $this->checkPass();
    }

    public function checkPass()
    {
        if ($this->isNewRecord){
            if (empty($this->getAttribute('npassword')))
            {
                $this->addError('npassword','Пароль не задан!');
                return false;
            }
        }
        if (!empty($this->npassword))
        {
            if(strlen($this->npassword)<4)
            {
                $this->addError('npassword','Пароль должен состаять как минимум 4 символа!');
                return false;
            }
            if ($this->cpassword!=$this->npassword)
            {
                $this->addError('cpassword','Пароли должны совпадать!');
                return false;
            }
        }
        return true;
    }

    public function checkDouble($attribute, $params, $validator)
    {

        $name=$this->getAttribute($attribute);
        $cnt=Users::find()->where([$attribute=>$name])
            ->andWhere(['<>','id',$this->getAttribute('id')])
            ->count();
        if ($cnt)
        {
            $msg='';
            if ($attribute=='username')
                $msg='Пользователь с таким именем уже есть';
            if ($attribute=='email')
                $msg='Пользователь с таким Email уже есть';
            $this->addError($attribute, $msg);
        }
    }

    public function getAttribute($name)
    {
        if ($name=='npassword')
            return $this->npassword;
        if ($name=='cpassword')
            return $this->cpassword;
        return parent::getAttribute($name); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
                'username'=>'Имя пользователя',
                'npassword'=>'Пароль',
                'cpassword'=>'Повтор пароля',
                'role'=>'Роль'
        ];
    }

    public function hasAttribute($name)
    {
        if ($name=='npassword') return true;
        return parent::hasAttribute($name);
    }

    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert))
        {
            if (!empty($this->npassword)) $this->setPassword($this->npassword);
            if ($insert)
            {
                $this->setAttribute('created_at',time());
                $this->generateAuthKey();
            }
            $this->setAttribute('updated_at',time());
            return true;
        }
        return false;
    }

    public static function getUsersList($cond=null)
    {
        $arr=self::find()->all();
        $list=[];
        foreach($arr as $item)
            $list[$item->id]=$item->username;
        return $list;
    }
}